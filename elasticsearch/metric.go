// Code generated by go-bindata.
// sources:
// data/ElasticsearchMetricType.json
// DO NOT EDIT!

package elasticsearch

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataElasticsearchmetrictypeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x4f\x6f\x24\xb7\xd1\xc6\xef\xef\xa7\x58\xcc\xf1\x85\x02\x6c\xae\x7b\x76\x0e\x3e\x24\x17\x27\x39\xc4\x30\x08\x8a\x5d\x33\x43\x8b\xdd\xe4\x92\xec\x91\x64\x23\xdf\x3d\x98\x9e\xd1\xae\xec\x20\x1a\x56\x0b\x6c\xb3\xb8\x0f\xe0\xc3\x1a\xcb\x91\xa6\x9b\xbf\x25\xeb\xcf\x53\x55\x3f\xfe\xba\x9b\xf4\x48\x29\x68\x43\xbb\x4f\x3f\xfe\xba\xfb\xa7\x76\x33\xed\x3e\xed\xec\x94\xc9\xed\xee\x76\xdf\x51\x32\xd1\x86\x6c\xfd\xb4\xfb\xb4\xdb\xdd\xed\xfe\xa6\xc7\xf3\xdf\xef\xfe\x7d\xf7\x75\x31\x39\x9d\xb2\x35\x89\x74\x34\xc7\xd2\x0f\x4d\x7e\xa0\xd2\xb5\xff\xff\x5f\x0b\xbf\xff\xee\x83\xdf\x7f\xf8\xcb\x0f\x1f\x8e\x3e\xe5\xaf\x9f\x3a\xff\xdf\x87\xef\xbf\xfb\xcd\x87\xf3\x31\x92\x1e\x54\xf0\xbe\xf8\x81\x0e\x34\x51\xb4\xa6\x74\xf9\xe5\x37\xa4\x37\x97\xff\x74\xb7\x3b\xbf\x25\xa5\x87\x13\xc5\x6c\x13\x0d\x2a\xdb\xe5\xef\x3e\x7e\xfc\xf8\xe7\x3f\x2d\xff\xfd\xfd\xe3\xc7\x4f\xcb\x7f\xff\xda\xdd\xed\x4e\x14\xd3\xf2\x63\x3e\xde\xed\x8c\x9f\xf6\xf6\xb0\xfb\x34\xcd\xce\xdd\xed\x06\x9d\xf5\xcb\x9f\xb3\x3e\xa4\x97\x3f\xff\x63\xb2\x59\x5d\x7e\xed\xf0\xfb\xef\x71\xfe\x5d\x29\xeb\x31\xfc\xaf\x5f\x78\x7e\x9e\xee\x51\xb0\xd3\x60\x0d\xbd\xbd\x51\xaf\x96\x07\x8a\xc6\x3b\x9d\x8b\xbf\xdc\xe7\x99\xa2\xbd\xf1\xf3\x01\x42\x03\x20\xac\x38\x13\x78\x4f\x62\xfc\x18\x1c\x65\x1a\xc0\x42\xeb\x2c\x30\x0f\x85\x48\xfb\x48\xa9\xf8\x31\xb2\xcf\xfa\xed\x17\x05\x08\xe4\x41\x90\xe8\x30\xd2\x94\x8b\xd7\xef\xed\x13\x0d\xea\xde\x66\x95\x28\xab\x91\x46\x1f\x9f\x95\x9d\xd4\xfd\x73\xc6\x75\xd1\x3e\x1d\x2b\xae\x8b\xbd\x8f\x86\xd4\x48\xf1\xc0\xb1\x1e\xe6\xb7\x17\x03\x86\x06\x60\x38\xe6\x1c\x58\xa7\xbf\xf2\x81\x26\x58\x02\xed\xef\xec\xcf\xa7\xb1\xf4\xf7\x8c\x54\xbc\xf4\x48\x3a\x28\xe3\xc7\xd1\xe6\x4c\x03\x4e\xfd\x1e\x71\x28\x89\x00\xfc\xc6\x3b\x98\xa7\x0c\x00\x5a\x07\x80\xed\x19\x7c\x9e\x29\x65\x65\xb4\x39\x16\x7f\xc1\xd1\xa6\xa4\xc0\x83\x08\x1e\xee\x23\xe9\x07\x8a\x5c\x20\x4a\x97\xfb\x13\xc5\x23\x69\x18\x0a\xcd\x83\xb0\xc2\x1f\x60\xc7\x12\x23\xfd\x4c\x06\x01\x24\x01\x34\x70\x63\x07\xd9\xc7\xe2\x2f\x96\xec\x2f\x04\x93\x51\x0c\x0a\xdc\x1b\x62\x6f\xc9\x0d\xcb\xeb\x2e\xfc\x80\xb3\xa3\xcd\x0a\x54\x88\xa2\x62\xc5\x75\xe1\x6c\xca\x34\x51\x2c\x5e\xaf\xe3\xe1\x96\xa9\x01\x16\x1a\x60\x81\xe1\x54\xde\xcf\xfb\x3d\xc5\x05\x9b\xe2\x03\x65\xb0\x91\x4c\xb1\xc5\x39\x27\x04\x24\xc0\xce\x17\x57\x54\x87\x70\xc3\xde\x44\x0c\x43\x1a\x33\xfb\xf2\xa3\x83\x61\x86\xe4\xe7\x80\x4c\x45\xf3\x7b\x5f\x27\x9e\xcd\x3a\x53\x9e\xfd\x3c\x1d\x70\x1d\x75\x89\x57\xe5\x9c\xb9\x9d\x06\x7a\x52\x8f\xd1\x66\x8a\x48\x99\x03\x8e\x37\xe0\xd0\x4f\x00\x44\x1a\x20\x15\x93\xad\x67\x1e\x00\x82\x14\x10\x2a\x67\x55\x28\x65\x3b\xea\x4c\xc3\x12\x35\x03\x0e\xad\xe3\xb0\x22\x58\xc6\x95\x64\x42\xae\x2f\x03\x85\x4d\x4f\x06\xdc\x18\x62\xb8\x60\xda\x96\x07\x2a\x47\xe2\xc9\xa6\x9c\x96\x2d\x3d\xf3\x30\x5a\xe7\x2c\x80\x68\x1e\x88\x15\x77\xc6\xfd\xec\x1e\x90\x5c\xe9\x8c\x03\xe6\xc1\xb0\xa8\xb3\xcb\x45\x7b\x73\x8c\x34\x65\x35\x78\x83\x23\xa1\x79\x14\x72\xd4\x53\x0a\x3e\x16\x1f\xfd\xf1\x09\x66\x80\xb0\x2d\x5e\x51\x95\x41\xd9\x1c\x55\x3a\xea\x38\xa8\x94\x75\xbc\xa5\xaf\x82\xd7\x20\x0f\x8b\x3a\x19\xaf\x11\xe9\x4e\x09\x9b\x5f\xbf\xd8\x5f\x9b\x6c\x4f\x88\x23\xf5\x48\x42\x9a\x0f\x37\xed\x7c\xb8\x05\xf2\x50\x60\xba\x05\x7b\x37\x33\xeb\xbb\x11\x30\x10\x46\x44\x75\x9d\x6e\x8e\xf6\xa6\x98\x0a\x24\x34\x40\x42\xb9\xb5\x78\xbb\x93\xc3\x6b\x2b\xe1\xa4\xad\xd3\xf7\x0e\xfe\xa4\x1c\x14\xea\xdb\x8e\xb0\x18\x84\xa0\x20\x4d\x39\x17\x48\x3f\x40\xf6\x20\x0a\xb1\xfa\x79\x6e\x78\xaa\x32\x48\x60\xba\x27\x8b\xf4\xcd\x96\x9f\x0d\x17\xa9\xdc\x5e\x5b\x07\x7b\xb4\x3b\x18\x6e\x26\xa3\x5e\x27\xb0\x10\xc2\xec\x90\x00\xde\x53\x7c\x9e\x29\x3e\x23\x5c\x21\x0c\x09\xcf\x48\x69\x17\x5b\xa3\x4b\xb5\x45\xa0\x68\x08\xa7\x42\xfb\x08\xac\x30\x17\x1f\x75\x1c\xcb\x2b\x88\xd1\x6f\x42\x0a\x0a\x9b\xa8\x5c\xa0\x85\xe8\x99\x09\x76\x3c\x9b\x4e\xd6\x9c\x57\x00\x85\xe6\x51\x68\x20\x76\xe5\x5d\xb1\xac\x06\x35\x9f\xa2\xe0\x0a\xd1\x1b\x4a\xe5\x39\x93\x2f\x2f\x0d\x3b\xdb\xf8\xce\xb2\x9b\x1d\x1a\x7f\xa2\xf8\xcc\xb5\x2b\x74\x52\xc9\xcf\xd1\x20\x2e\xd9\x3c\x11\xf5\xf3\x61\xe8\x78\xdd\x2f\x08\x90\x51\xf5\x86\x41\xbd\x7e\xc8\x4b\xfa\x12\xe1\x69\x11\x14\xac\xd1\x55\x4e\x3a\xa4\xa3\x2f\x3e\x11\x20\xb5\x17\xc2\x02\xd3\x66\xbc\x24\x1f\x58\xed\xb1\x97\xc5\x38\x1a\xba\xc4\x81\xf7\x14\xc9\x44\xef\xa0\xb4\x95\xc6\x04\xc3\x68\x30\x4e\xa7\x54\x8e\xcf\x45\x79\x3d\x4f\xce\xeb\x81\x06\x9c\x11\x32\x78\x60\x06\x90\x7c\xa0\x49\xed\xad\x23\xf5\xf2\x3e\xfd\x0d\xd5\x36\x76\x59\xde\x2e\x8f\xfa\x09\x9b\x2c\x6e\x93\x37\xd1\xad\xe1\xbe\x97\x05\x45\xed\xfb\x1e\xb7\xbd\x24\x1a\x36\x08\x16\x40\xe5\x2c\x03\x85\xaa\xce\xe1\x62\x26\x1a\x3f\x65\x7a\xba\xd1\x43\x14\x2c\x34\xc0\x02\xe3\x92\x38\x14\x27\x93\x8c\x77\x8e\xcc\x4d\xd3\xf1\xd5\x27\x58\x25\x36\xd7\x1f\x6f\xfd\x04\x9b\x44\x18\x6e\xd5\xeb\xbf\x81\x40\xeb\x08\x5c\x57\x60\x97\x9a\xde\xa5\x77\x77\x74\x62\x4c\x56\x83\xf6\xa0\x57\x24\xb8\xb3\xb3\x90\x6e\x14\xc2\x02\xf3\x1e\x37\x7e\x0c\x8e\x96\x35\xa5\x4e\x07\x44\xef\x1d\xf3\xb0\x2e\xdf\x08\xfb\x4e\x02\x0a\xf5\xab\xe9\xaf\xa7\x09\x0a\xa4\xba\x84\x81\x3d\x9e\x19\xaa\x45\x21\x30\x34\x35\x70\x13\x69\x0b\x11\xcc\x54\x35\x2c\x2e\x1e\x2b\x62\x88\xb2\x90\x60\x2a\x1a\x4c\x98\x79\x79\x4d\xa0\x20\x06\x85\xad\x54\xaf\x98\x57\xd5\x21\x0d\xdc\x41\x87\x99\xe2\xa8\x4e\x97\xbc\x16\x86\x1c\x4a\x83\xa3\x4a\xe3\x96\x7d\x24\x44\xa9\xe4\x30\xc0\x9e\x44\x92\x31\x89\x44\xd8\x16\x33\xef\x00\x5e\x63\x9e\x6b\xe5\x34\x28\xe8\x8c\x02\x46\x89\xec\x68\x53\xb2\xd3\x01\x4e\x63\xdf\x44\x70\x6d\xc3\xc1\x1b\x75\x3a\xff\x19\x96\xa1\x38\x34\xaa\x4f\x20\x70\x76\xb4\x19\x3e\xa4\x08\x18\xea\x89\xe6\x5f\xda\xae\x40\x36\x2f\x89\x87\x6d\x27\xdb\x21\xb3\xd9\x33\x18\x9c\x41\xb7\xe8\x01\x2a\x05\x84\x06\x9a\xfc\xfd\x30\xc7\x93\x3d\xf9\x62\x3f\x16\x33\x2a\xc4\x51\x56\x35\xae\x81\xc9\x69\xdf\x00\x12\xbc\xe6\xc3\x10\xdb\x89\x60\xa0\xfe\x68\x4d\x48\xb2\x85\xa0\xc0\x3c\x0e\xd8\x32\x3b\x5c\x0f\xb2\x78\xa8\x33\x7c\x3b\xe8\xfc\xf6\xa3\x62\xef\x1b\xd8\xfb\x0d\x8a\xfd\x51\xb4\xd5\x2b\x09\xec\x9b\x01\x51\x2b\x31\x38\xd4\x4b\x8c\x9e\xdf\xef\xf7\xd3\x5f\x61\x1c\x7c\xe3\x1c\xd0\x93\x4d\x39\xa1\x58\xeb\x5b\xe7\x00\x00\xf4\x08\xc0\x0a\x05\x35\xe6\x15\x89\x81\x61\xdb\x64\x27\x52\x5c\x52\xb8\xd8\x62\xcc\x1d\x28\x68\x9d\x02\x81\x89\x4e\x8c\x34\x13\x45\x18\x57\x89\x17\xe9\xf3\xcc\x48\x65\x7c\xd5\xe1\x81\x09\x31\x4c\xd4\xcf\x72\xaa\x7c\x8c\x3e\x67\x77\xdd\x5e\xe4\x38\xe4\xc0\xd1\xc0\x95\xc4\x18\xb0\x09\xd9\x0d\x00\xe3\x03\xc6\x6a\x8d\xba\x20\x06\xab\x47\x14\x63\x6b\xbc\x6e\x1f\x0d\xa9\xe5\xae\x43\x92\xa6\x3b\x20\x2a\xf7\xc9\x19\x75\x08\xe5\x51\x1a\x1c\x26\xbd\xb2\xd3\x62\x3f\x6f\x54\xc5\x88\xa0\x6c\xcd\x95\xc5\x6a\xe5\x0d\xd1\x61\xbf\x20\xf0\x6d\x17\x64\x0a\xa4\xf0\xb0\x41\xb4\x66\xf0\x06\x07\x43\xf3\x20\xd4\x51\x9f\xa6\x60\x91\x47\x6e\x7f\xf3\x57\xdc\x0a\xcb\x88\xb9\xd2\xc5\x18\x34\x25\x83\x03\x6e\xd3\x0d\xce\xd0\x88\x97\xa0\x3d\x62\xf6\xc2\xa0\xa8\xde\x6e\x83\x52\xb6\xa3\xce\x34\xa0\xe5\x86\x08\x20\x56\xdc\x16\x1c\x1d\x22\x5c\x49\x60\x00\x93\x41\x0a\x05\x0d\x24\xdc\x18\x19\x5d\x24\x73\x25\xb1\xc5\x34\x47\x97\x6e\xa1\xce\x17\x87\xb1\x7d\xa0\xa8\x33\x94\xce\x12\x50\x58\x71\xd9\x8c\x7a\xd2\x07\x1a\x6f\x49\x55\x61\x7a\xc8\xa3\x61\x8b\xe9\x55\x90\x39\x0b\x81\x61\xcb\xc9\x97\x38\x21\xfa\x85\x82\xf7\x24\x18\x62\x25\x84\x84\x0d\x86\x4c\xa0\x87\x70\xef\x54\xac\x68\xcf\x06\x06\x5a\x67\xa0\x4e\xca\x13\x23\x46\x44\x41\x50\xf9\x7a\xc0\xc5\x20\x8c\x87\x2d\xbd\x09\xc8\xa4\xa4\x50\x51\xbf\xeb\xc2\x68\x53\x82\x9a\xb6\x4b\x1a\x78\x4f\x71\x61\x07\x26\xa4\x08\x12\xea\xe6\x40\x51\x02\x24\x06\x04\xe6\x91\xb0\xa8\xe7\x6c\x79\xc5\xc5\xb2\x1e\x87\x82\x0c\x16\x56\x1c\x0a\xbc\xf8\x02\xb4\x11\xdd\x82\xb0\xa2\xd8\x02\x34\xc8\xa0\x81\xab\xa3\x0c\xfa\x66\xfe\xf1\x75\x3e\x02\x33\xcb\xc4\x90\x50\xd5\x7f\xb8\x44\x23\x60\x2a\x88\x20\xa1\x7a\x9a\x12\x97\x43\xbf\x20\xf0\xe6\x82\xa0\xff\xbb\x08\x10\xea\x5a\x09\xfe\x44\xf1\x48\x1a\x01\x85\xe6\x39\xa8\x1c\x50\x40\x35\x96\x50\x2e\x7c\xb9\xd9\xf8\xa8\x43\xe9\x5a\x34\x8d\x11\x05\x01\xa3\xe8\x62\x0e\xf8\x17\x2e\x6b\x73\x2f\x1f\xe3\xe4\x08\xac\x43\x19\x83\x8c\xbd\xad\xac\x36\xb9\x6e\x99\x1a\x75\x80\x24\xb1\x73\x36\x56\x68\x0c\x8e\x36\x43\x62\x20\x03\x86\x6d\x52\x07\x10\xb1\x0b\xc1\xa1\x72\x25\x24\x5a\xac\x8b\xa2\xa1\x8e\x70\xf9\xd2\xad\x0b\x14\x48\xa1\x60\xc5\x15\xe1\x6c\xca\x34\x95\x0b\x0d\x10\x33\x16\x41\x42\xed\x49\xd2\x57\x57\x02\xb7\x44\xcf\x54\x44\x32\xfe\x44\xf1\x19\x11\xe4\xce\xb9\xa8\xd3\xb1\x65\xf2\x93\x3a\x92\x0e\xca\xf8\x71\xb4\x39\x23\x9e\x2c\x08\x89\x4d\xba\x6b\xc0\xd9\xec\x97\x86\x77\x4c\x95\x84\x42\xa5\x5b\x2a\xd8\x86\x26\xfc\x0d\x11\x28\xd4\xd5\xa8\xa0\x1d\xa8\x2c\x1a\x36\x31\x1e\x50\x2a\xdb\x31\x0e\xcc\xee\x1a\xe8\xc1\x24\x83\x84\xca\x12\xb6\x81\x1c\x65\x42\x9f\xb6\x4e\x71\xb8\xce\x0a\xe6\x65\xb8\xe9\x64\x97\xb9\x54\x38\x1d\x9a\xc7\xa1\x7a\xe9\x03\x4c\x06\x29\x28\x34\x32\x03\x8f\xd1\x47\x1a\x13\xf0\xa4\x31\x56\xbf\xc0\x06\x81\xac\x6e\x49\xe0\x39\x28\x08\x74\xf7\x4b\x42\xa4\x7d\xa4\xf2\xb9\x98\x08\x68\x8a\x00\x81\xe9\x9a\x30\x5a\xf8\x8c\x36\x25\x3b\x1d\x50\x8f\x2d\x03\x84\x2d\x92\x1c\x88\x5f\xf5\x0b\x03\x3f\xb0\x8d\x1b\xa2\x57\x16\xd8\x6d\xff\xc0\x41\xfb\x1c\x94\x97\xdf\x32\xb4\x53\xa8\xbe\x15\xc5\xc0\x26\xf7\x02\xa2\x09\x32\x60\xa8\xad\xbd\x86\xe3\x20\x02\x83\x2a\xf7\x02\x2a\x72\x64\x41\xd0\xc0\x2c\xcc\x67\x3f\x97\x67\xd0\x31\x0d\x53\x12\x5d\x75\x7b\x4d\xc3\xff\x10\x01\x01\xd3\xdc\x58\xaa\xc1\xcb\xcb\x86\x97\xfb\x26\x65\x1f\xc2\x75\x73\x51\xd7\xd3\x2d\x1a\x5c\xb9\xd5\xe4\x7d\x50\x73\x18\x74\x26\x44\xb3\x65\x10\xb1\xe5\x2c\x1b\xf8\xab\x32\x98\x28\x77\x54\x9c\xd7\x83\xd2\x27\x8a\xfa\x46\x43\x11\xec\x6b\x03\xfb\xba\x8d\xd8\x16\x36\x41\xd7\x54\xbc\xa7\x33\x00\x60\x68\x1d\x86\xf2\xb6\x31\xb7\xed\xbb\xd7\x3f\x16\x03\x2f\xfb\xa4\x80\xd3\x3c\x48\x9f\xb4\x75\xfa\xde\x81\x04\x39\x24\x54\x6e\x04\x81\xac\xa6\x28\x1a\x56\x38\x8b\x8b\x11\x89\x00\x63\x57\x18\x30\x0e\x85\xfb\x79\xbf\xa7\xa8\x58\xf9\x89\x51\x87\x50\xde\x1b\xe2\x12\x90\x34\x3a\x68\x63\x33\x7a\xd9\x76\x49\x51\xad\x4c\xd8\x0f\x73\x3c\xd9\x93\x2f\x56\xed\x23\x19\x26\x09\xb0\xca\x8d\xb4\x27\x1f\xc7\x84\x16\xda\xd2\xa8\xa8\x7c\x79\x0d\x36\x92\x29\xce\xa8\xe2\xf2\x12\x4a\xd1\x26\xb3\x7c\xd1\xb6\x40\x08\x0d\x6b\x94\xdf\x93\x0e\xe9\xe8\xd1\x19\xaf\x37\x16\xb8\x56\x07\xaf\x80\x18\x59\x75\x11\x10\xd4\xd5\x61\xa1\x6b\x45\xc7\x1c\xb0\xf3\x6b\x50\x55\x74\xcb\xc2\xfd\xec\x1e\x8a\x6f\x06\x94\x8c\xca\xe0\xe0\xfc\x80\xd8\xa5\xd6\x77\x69\x8d\x2e\xce\xcd\xe8\xfa\xd0\x19\x06\x75\xdb\xd8\x3a\x3b\xda\x8c\x99\x19\xb2\x90\xd8\x60\xa6\x8e\xf1\x63\x70\x04\x0b\xbf\x4f\x1a\xb8\xa1\x1f\xb8\x7b\x52\x60\xa8\x7b\x5b\xe4\x68\x6f\x26\xc6\x81\x41\x03\x18\x30\x43\x80\x83\x37\xe5\x6b\x09\xf7\x42\x8f\x0c\x70\xc3\xc0\xd0\xd8\x8b\xa2\xa1\x01\xad\x0b\xa3\x73\x6d\x20\xfd\x00\x69\xa6\x2c\xc2\xb6\x1d\xc8\x84\x6c\xa4\x10\x2c\xaa\xf4\x1c\x59\xaa\x39\x02\x45\x03\x71\x82\x00\x04\x18\x25\x3d\x5f\xde\x17\x36\xb5\xf1\x4d\xdd\xa0\xc7\x83\x9e\xb3\x57\x5f\x26\xb8\xc2\x12\x90\x82\x46\xed\x22\x0d\x04\x27\xc5\xa0\xc0\x3c\x25\xf6\x96\xdc\xc0\xa9\xe8\xc3\xd0\xef\x6f\x80\x0a\xee\xd0\xef\xab\x6a\x55\xe9\xa4\xf2\xd9\x4d\x80\x89\xd8\x1f\x11\x2b\xc6\x6e\xe1\xac\x90\x48\xc6\x2a\x21\xe3\x44\xd1\x32\x66\x30\xc1\x9c\x10\x02\x43\x9d\x28\x26\x0a\xc1\xe5\x91\x50\x6f\x18\x0a\x6a\x5e\xfa\x44\xe0\xf3\x4c\xf1\x99\x67\x31\x5c\x8b\xe3\x30\x3b\x4f\x02\x0e\x95\xd5\xcd\xb0\x12\xe4\x90\x10\xf5\x94\x82\x8f\xc5\x47\x7e\xa2\x78\xa2\xa8\x7c\xa0\x09\xbb\xdb\xfa\xee\x32\x6c\x40\xa4\x13\xc4\xec\x6a\xe5\x56\x09\xb8\xc3\x45\x50\xb0\x46\x43\xe0\xa3\x21\xb5\xa4\x97\x8a\x8f\x05\x14\x2a\xc9\xc0\xa1\x5c\x3b\x90\x1e\xf5\xdb\x87\xfc\xef\xc5\x03\xf0\xf4\xa5\x40\x50\xbb\x0e\x0a\x86\xbd\x18\x14\xb8\xea\xf6\x6b\x9a\xa0\x74\xf9\xd7\x62\x28\xa0\xd0\x3a\x0a\x5b\x24\x8c\x40\x41\xeb\x14\x84\xe8\x0d\xa5\x72\x2f\x20\xcc\xa5\x4b\x21\x2e\x14\x82\xc0\x0a\xf3\xe0\x51\xc7\xb1\xbc\x14\x12\x75\xd2\x22\x38\xb8\x7c\xac\xf8\x24\x38\xdf\x03\x8a\x4e\xd6\x9c\xd7\xc1\x0b\x68\x7e\x7b\xb9\xa6\x1f\x5b\x49\xe6\x4f\x14\x8f\xa4\xe1\x05\x34\x8f\x42\xe5\x44\x0f\xba\x19\x75\x8b\x41\xa4\x7d\xa4\xf2\xc8\x00\x6a\x8c\x84\xa0\xc0\x4e\x1e\x70\x9e\xe2\xaa\x1b\x80\x2a\x44\x06\x0b\x95\x6f\x07\x78\x03\xbd\x52\xc0\x2c\x80\x47\xd8\x58\x0c\x0c\x5b\x8c\x23\x86\xa8\x5c\x12\x11\xcc\xb8\x21\x43\x4b\x7c\xc1\xe1\x64\x63\x9e\xb5\x03\x11\x62\x88\x60\xe7\x13\x58\x9e\xc4\x85\x0a\xf4\x4c\xe9\x9a\x09\x76\xdf\x64\xf8\x14\x42\x40\xa8\x5d\xd0\x8c\xfe\x7a\x52\x48\x68\xa0\x8d\x12\x77\x64\x18\x7a\x29\xc9\xc3\x6c\x8d\xfb\xca\x7a\x12\x48\x20\x85\x90\x50\x3d\xef\x45\x29\xdb\x51\x67\x1a\xe0\xc3\xca\x22\x63\x83\xa8\x06\x1c\x16\x59\x48\xac\xb8\x36\x46\x3d\xe9\x03\x8d\x8c\x26\xc0\x08\x7c\x8a\xe1\xa1\x6a\x5e\xec\xd2\xbc\x11\x3e\xac\x10\x16\xea\x67\x44\xe0\xc5\x4a\x61\xa1\x4e\x5d\xcd\xc5\x66\x80\x01\x29\x85\x02\x54\xc7\x8a\xd9\xaa\xca\xd5\xb1\x29\xfb\x48\x83\x5a\x7c\x47\x0c\x14\x17\x47\xc7\x06\x13\x60\x60\xf4\x8b\xa1\xa1\xf6\x60\xf0\xf4\xa5\x25\x2f\x60\x68\x1e\x86\xda\xc5\xb3\xb0\xf9\xa5\x90\x50\x77\x32\x14\xa2\xc8\x42\xb1\x60\x24\x34\x0f\x8c\x8e\x9a\xce\x91\xc9\xbe\x9c\x36\xc6\x6c\x98\xeb\x0f\xb7\x7e\x42\x7c\x5a\x18\x6c\x95\x4d\x93\xcb\x68\x32\xb5\xc4\x21\x00\x43\xeb\x30\xd4\x6f\xec\x0b\xe3\xa4\x63\x16\xb8\x13\x6d\x51\xd6\xd7\x2d\x0a\x2c\x8f\x05\x45\x7d\x52\x40\xe0\x76\xf1\xcc\x4f\x68\xd5\x2b\x63\x6b\xeb\x77\x6e\xc6\xac\x07\x89\x5c\x54\xef\xe5\x82\x30\xb6\x18\x16\x2a\xf7\x7a\xc3\x28\x73\x21\x1c\xd4\x1e\xf9\x81\x46\x5f\x42\x40\x78\xf7\x7c\x61\x1f\x8b\xbf\x28\x9c\x84\x7e\xa1\x60\x55\x66\xa1\x4e\xa2\x5f\x10\xde\x31\x7d\x1c\x5d\x40\x44\x40\x71\xcc\xb9\x58\xbd\xf8\x32\x34\x12\x43\x40\x24\xec\x6c\xed\x73\x1f\x06\x40\xbf\x20\x70\x33\x07\x48\x23\x75\x0c\x03\x2b\x77\x80\x1c\x52\xb7\x1c\x30\x1b\xba\xe0\x4c\xe8\x98\x85\xd5\x61\x03\x84\x97\xc5\x60\x51\x5e\x02\x85\x32\x19\x31\x9b\xca\x4e\x19\x47\xa4\x8c\x85\x6c\x2d\xb7\x02\x8a\xd9\xcc\x13\x55\xcc\x32\x30\xd8\xf3\x3a\x58\xb0\x16\x43\x28\xf0\x5e\x0c\x8c\x9b\x53\x2e\x77\xac\xcf\xcf\x32\x28\x3f\xe3\xdf\xdd\x46\x2f\xfc\xe2\xbf\xaa\x10\xed\xa8\xe3\xf3\xc5\xc2\x05\xed\x1b\xbd\x7c\x3b\xd9\x6c\xb5\xb3\xbf\xd8\xe9\x80\x57\xbf\xe9\xab\x9f\xe6\xf1\x9e\xa2\xf2\x7b\x15\x68\x1a\xce\xef\x3f\xeb\xf4\x80\xd7\xbf\xf9\xeb\xb7\x93\xda\x3b\x7b\x38\x66\xb5\xf8\xd8\xd8\x80\xad\x37\xe0\x6c\xa8\x81\xfb\x6d\xaf\x5b\x9c\xf5\x5b\xbe\xf4\x81\x9c\x7e\xa6\x41\xcd\x93\x4e\xc9\x1e\x26\x1a\xb0\x01\x9b\x6e\x00\x5e\xfc\x1f\xe5\x4e\xe9\xf4\xa0\x46\xfd\xa4\x1e\xb5\xcd\x67\x23\xc7\x4e\x6a\x11\xaa\xa0\x3e\xf6\x8f\x3b\xf6\x5f\xf4\xa5\x4a\x27\x75\xb9\x86\xb1\x0d\xdb\x6c\xc3\x75\xb9\x3a\x7f\x5d\xbc\xf3\xad\x0d\xcd\xf3\x9b\x80\xb5\xb9\xe5\xbb\x8f\xe4\xbc\xd1\x19\xd1\x85\xad\x5f\x7c\xca\x3a\xcf\x78\xdb\x9b\xbe\x6d\x65\xa5\x67\x6b\x7e\xfa\xbf\xff\x04\x00\x00\xff\xff\x26\xf6\xed\xe6\x9c\x4d\x02\x00")

func dataElasticsearchmetrictypeJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataElasticsearchmetrictypeJson,
		"data/ElasticsearchMetricType.json",
	)
}

func dataElasticsearchmetrictypeJson() (*asset, error) {
	bytes, err := dataElasticsearchmetrictypeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ElasticsearchMetricType.json", size: 150940, mode: os.FileMode(420), modTime: time.Unix(1529338037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ElasticsearchMetricType.json": dataElasticsearchmetrictypeJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ElasticsearchMetricType.json": &bintree{dataElasticsearchmetrictypeJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

